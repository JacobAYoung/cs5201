Lambda Functions:

- Anonymous functions
- Easy way to make a functor class/object.
- Lambda calculus

Syntax:

auto func = [] () -> int {};

//Syntax def:
auto = Required
func = name
[] = capture clause
() = Parameter list
-> int = optional return type
{} = body

auto print_it = [] (int x) { cout << x << endl; };

print_it(5);

Capture Clauses:

int x = 3;

auto times_x = [ = ] (int n) {
  return n * x;
};

[ = ] : Capturing by value


//This class is the same as the lambda function above.
class TimesX {
  public:
    TimesX(int x) : X(x) {}
    int operator()(int n)
    {
      return n*x;
    }
  private:
    int X;
};


By value/copy: =
By reference: &
Calling object byref: this
               byval: *this
[a, b, &r, m=move(m)]


Why are lambdas cool?:

- Shorthand makes code more legible
- "Glue" functions that don't quite fit together
- Make library code more flexible

stdlib features:

std::transform

vector<int> in = {1, 2, 3, 4, ..., 7};
vector<int> out;

std::transform(in.begin(), //start
               in.end(), //stop
               out.begin(), //store values
               [](int x) { return x*2; } //Could write as &double as function below
              );

int double(int x)
{
  return x*2;
}

in <numeric>

std::accumulate

- Structure (vector)
- Start value
- Combine element & start

[] (int l, int r) {
  return l + r;
}
//Accumulate just adds everything from the vector like this.
{1, 2, 3} = (((0 + 1) + 2) + 3) = 6


Storing things you can call:

//A class that can wrap up anything that can be called and gives you a nice interface to be used
std::function

std::function<string(int, int)> func = [](int, int) {....};


using alias = type;

using input_callback = std::function<void(EventDispatcher&, string)>;
